name: DockerHub release

on:
  push:
    branches:
      - main


env:
  IMAGE_NAME: undeadgrishnackh/berlin_clock
  PLATFORMS: linux/amd64,linux/arm64
  DOCKERHUB_USERNAME: undeadgrishnackh
  DIVE_VERSION: 0.10.0
  CLAIR_DB: arminc/clair-db:latest
  CLAIR_SCAN: arminc/clair-local-scan
  CLAIR_VERSION: v12


jobs:
  check_out_and_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: 🔒Generate Lock File for dependencies
        run: |
          echo '🏗️ install and upgrade pip'
          python -m pip install --upgrade pip
          echo '🏗️ pipenv local virtual env installation'
          pip install pipenv
          echo '🏗️ lock the PipFile.lock with the latest dependencies'
          pipenv lock

      - name: 🧪 Run unit, integration, and e2e tests inside the docker container
        run: |
          echo '🧪✔️Unit - 🔌❌ Integration - 👩🏻‍💻✔️ E2E test into the Docker multi stage test image'
          echo '💸 the integration test phase on the random port fails so far....'
          docker build -t ${{ env.IMAGE_NAME }}:test --target test -f ./Dockerfile.test .
  

  quality_gate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: 🚓 Gate - Hadolint
        run: |
          echo '🕵️‍♂️ Hadolint'
          docker run --rm -i -v ${{ github.workspace }}/.hadolint.yaml:/.config/hadolint.yaml hadolint/hadolint < Dockerfile

      - name: 🚓 Gate - Chef InSpec test to check DockerFile key configuration wasn't changed by mistake
        run: |
          echo "🧪 🐳 DockerFile structure"
          echo "🔌 Installation Inspec.io"
          echo '🏷️force silence license acceptance'
          export CHEF_LICENSE=accept-silent
          echo '🔌 install inspec'
          curl https://omnitruck.chef.io/install.sh | sudo bash -s -- -P inspec
          echo "📁 run DockerFile structure test..."
          inspec exec tests/release/inspec/dockerfile

  build_tmp_image:
    runs-on: ubuntu-latest
    needs: [quality_gate]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: ⚙️ Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: ⚙️ Build Docker image
        run: |
          echo '🏗️ Build PipFile.Lock with the latest dependencies'
          pipenv lock
          echo '🏗️ BuildX multi-arch agent'
          docker buildx create --use
          echo '🏗️ buildx build of ${{ env.IMAGE_NAME }}:build on ${{ env.PLATFORMS }}'
          docker buildx build --progress=plain --platform=${{ env.PLATFORMS }} --tag ${{ env.IMAGE_NAME }}:build -f Dockerfile . --push --no-cache

  quality_gate_image_container_structure:
    needs: [build_tmp_image]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: 🚓 Gate - Google Container Structure Tests on the build image
        run: |
          echo "🧪 🧬 Container Structure Test"
          echo "🔌 Installation Container Structure Test"
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test
          echo "📁 run container structure test on ${{ env.IMAGE_NAME }}:build"
          container-structure-test test --config tests/release/container-structure/components.yaml --output text --pull --image ${{ env.IMAGE_NAME }}:build

  quality_gate_image_efficiency:
    needs: [build_tmp_image]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: 🚓 Check - Dive for image layers and efficiency
        run: |
          echo '💿 Get Dive version ${{ env.DIVE_VERSION }}'
          wget https://github.com/wagoodman/dive/releases/download/v${{ env.DIVE_VERSION }}/dive_${{ env.DIVE_VERSION }}_linux_amd64.deb
          echo '🏗️ Installing Dive'
          sudo dpkg -i ./dive_${{ env.DIVE_VERSION }}_linux_amd64.deb
          echo "📁 run dive on ${{ env.IMAGE_NAME }}:build"
          CI=true dive ${{ env.IMAGE_NAME }}:build

  quality_gate_image_grype_vulnerability_scan:
    needs: [ build_tmp_image ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: 🚓 Check - Anchor Grype - Vulnerability scanner
        run: |
          echo "🔌 Installation Anchore/Grype"
          mkdir report
          echo "🔌 Download and install the latest Anchore Grype version"
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          echo "👉 Run Grype scan"
          grype ${{ env.IMAGE_NAME }}:build --scope all-layers --fail-on high | tee ./report/grype-scan-report.txt

  quality_gate_image_clair_vulnerability_scan:
    needs: [build_tmp_image]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: 🚓 Check - Image scan by Clair
        run: |
          echo "🔌 Download the latest clair-scanner version"
          wget --no-verbose https://github.com/arminc/clair-scanner/releases/download/${{ env.CLAIR_VERSION }}/clair-scanner_linux_amd64
          echo "📀 Install clair-scanner"
          mv ./clair-scanner_linux_amd64 ./clair-scanner
          chmod +x ./clair-scanner
          echo "👉 Run ${{ env.CLAIR_DB }}"
          docker run -d --name clair-db ${{ env.CLAIR_DB }}
          echo "👉 Run ${{ env.CLAIR_SCAN }}"
          docker run -p 6060:6060 --link clair-db:postgres -d --name clair ${{ env.CLAIR_SCAN }}
          echo "ℹ️ getting MY_IP"
          MY_IP=$(ifconfig eth0 | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1')
          sleep 10
          echo "ℹ️ getting CLAIR_IP"
          CLAIR_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' clair)
          echo "👉 run clair-scanner on $MY_IP pointing http://$CLAIR_IP:6060"
          ./clair-scanner --ip $MY_IP --clair http://$CLAIR_IP:6060 -t High --reportAll=false ${{ env.IMAGE_NAME }}:build | tee ./report/clair-image-scan-report.txt
          echo "🧹 clean up"
          docker stop clair
          docker rm clair
          docker stop clair-db
          docker rm clair-db
          docker image rm ${{ env.CLAIR_DB }}

  quality_gate_image_trivy_vulnerability_scan:
    needs: [build_tmp_image]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: 🚓 Check - Trivy - Vulnerability scanner
        run: |
          echo "🔌 Installation Trivy"
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
          echo "👉 run trivy image -s HIGH,CRITICAL {{ env.IMAGE_NAME }}:build"
          trivy image -s HIGH,CRITICAL ${{ env.IMAGE_NAME }}:build | tee ./report/trivy-image-scan-report.txt

  versions_catalogue_and_publish:
    needs: [quality_gate_image_trivy_vulnerability_scan, quality_gate_image_clair_vulnerability_scan, quality_gate_image_grype_vulnerability_scan, quality_gate_image_efficiency, quality_gate_image_container_structure]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: 🚓 Check - Anchor Syft - Version Catalogue
        run: |
          echo "🔌 Installation Anchore/Syft"
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          echo "📁 catalogue the versions inside the container..."
          syft ${{ env.IMAGE_NAME }}:build --scope all-layers

      - name: 🏷️ Tag Docker image LATEST
        run: |
          docker login
          echo '🔎 Checking Docker images'
          docker images --all --format table
          echo '🏷️ Tagging Docker image with latest tag'
          docker tag ${{ env.IMAGE_NAME }}:build ${{ env.IMAGE_NAME }}:latest

      - name: 🔌 Publish :latest Docker image to Docker Hub
        run: |
          echo '🔌Pushing Docker image with latest tag'
          docker push ${{ env.IMAGE_NAME }}:latest
          echo '🔎 Checking Docker images'
          docker images --all --format table